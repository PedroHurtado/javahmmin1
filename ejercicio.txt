1. Crear un ingrediente

    1. Controlador
    2. UseCase
    3. Repository->InMemry->static List<ingredient>

    public record RequestIngredient(String nombre, Double price) {
    }

    Mono<RequestIngredient>

    public record ResponseIngredient(UUID id,String nombre, Double price) {
    }

    Mono<ResponseIngredient> 201

2. Get
    Request id
    Response id,name,price
    Repository->UseCase->Controlador

    Mono<Ingredient>->Mono<Response>

    Mono.just()
    Mono.map()

    Ingredients.stream.filter(i=>i.id==id)

    Optional<T>- No tiene valor
        404
        200

3. Crear una pizza
    Request->Dto
        Flux<IngredientId>
    (name,description,url,Flux<UUID> ingedients)
    Mono<Request>

    UseCase->Repository Ingredient
    Repository Pizza

    .map(p->{
        creo la pizza
        flatmap(ingredies)
            Repository.get->OK
            addIngredient(ingredient)
    })

    .map->response

    Flux.fromIterable()
        .flatmap(dto->ingrediente)

4. Get All para ingredients
    
    Flux<> Correctamente

org.springframework.core.codec.
	CodecException: 
Type definition error: [simple type, class


Mono<Request>

Request
{
   Flux<E>   //da un error de codec
}

Response{
   Flux<E> //no da error pero no serializa correctamente
}

Debemos de sustituirlo es con 

	un Set, List, etc.   en el request
	Response->Stream


5. Crear un metodo en un Controlador
    que devuelva un mono

    Mono->{
        name:"Pedro"
        Flux<String> saludo:"Hello World"
    }


    saludo:[H
    e
    l
    l
    o]